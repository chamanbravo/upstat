/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/auth/refresh-token": {
    /** Renew access and refresh tokens. */
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/auth/signin": {
    /** Auth user and return access and refresh token. */
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["UserSignInOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserSignIn"];
        };
      };
    };
  };
  "/api/auth/signout": {
    /** De-authorize user and delete refresh token from Redis. */
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/auth/signup": {
    /** Create a new user. */
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["UserSignInOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserSignUp"];
        };
      };
    };
  };
  "/api/monitors/cert-exp-countdown/{id}": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["CertificateExpiryCountDown"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/create": {
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AddMonitorIn"];
        };
      };
    };
  };
  "/api/monitors/delete/{id}": {
    delete: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/heartbeat/{id}": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
        query: {
          /** Start Time */
          startTime: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["HeartbeatsOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/info/{id}": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["MonitorInfoOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/list": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["MonitorsListOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/pause/{id}": {
    put: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/resume/{id}": {
    put: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/summary/{id}": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["MonitorSummaryOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/update/{id}": {
    put: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AddMonitorIn"];
        };
      };
    };
  };
  "/api/monitors/{id}/notifications": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["NotificationListOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/monitors/{id}/status-pages": {
    get: {
      parameters: {
        path: {
          /** Monitor ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["ListStatusPagesOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/notifications/create": {
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NotificationCreateIn"];
        };
      };
    };
  };
  "/api/notifications/delete/{id}": {
    delete: {
      parameters: {
        path: {
          /** Notification Channel ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/notifications/info/{id}": {
    get: {
      parameters: {
        path: {
          /** Notification Channel ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["NotificationChannelInfo"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/notifications/list": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["NotificationListOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/notifications/update/{id}": {
    put: {
      parameters: {
        path: {
          /** Notification Channel ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NotificationCreateIn"];
        };
      };
    };
  };
  "/api/status-pages/create": {
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateStatusPageIn"];
        };
      };
    };
  };
  "/api/status-pages/delete/{id}": {
    delete: {
      parameters: {
        path: {
          /** Status Page ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/status-pages/info/{id}": {
    get: {
      parameters: {
        path: {
          /** Status Page Id */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["StatusPageInfo"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/status-pages/list": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["ListStatusPagesOut"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/status-pages/summary/{slug}": {
    get: {
      parameters: {
        path: {
          /** Status Page Slug */
          slug: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["StatusPageInfo"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/status-pages/update/{id}": {
    put: {
      parameters: {
        path: {
          /** Status Page ID */
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateStatusPageIn"];
        };
      };
    };
  };
  "/api/users/setup": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["NeedSetup"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/users/update-password": {
    post: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdatePasswordIn"];
        };
      };
    };
  };
  "/api/users/{username}": {
    patch: {
      parameters: {
        path: {
          /** Username */
          username: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateAccountIn"];
        };
      };
    };
  };
}

export interface components {
  schemas: {
    AddMonitorIn: {
      name?: string;
      url?: string;
      type?: string;
      frequency?: number;
      method?: string;
      notificationChannels?: string[];
      statusPages?: string[];
    };
    CertificateExpiryCountDown: {
      daysUntilExpiration?: number;
      message?: string;
    };
    CreateStatusPageIn: {
      name?: string;
      slug?: string;
    };
    ErrorResponse: {
      message?: string;
    };
    Heartbeat: {
      id?: number;
      monitor_id?: number;
      /** Format: date-time */
      timestamp?: string;
      status_code?: string;
      status?: string;
      latency?: number;
      message?: string;
    };
    HeartbeatsOut: {
      message?: string;
      heartbeat?: components["schemas"]["Heartbeat"][];
    };
    ListStatusPagesOut: {
      statusPages?: {
        id?: number;
        name?: string;
        slug?: string;
      }[];
      message?: string;
    };
    Monitor: {
      id?: number;
      name?: string;
      url?: string;
      type?: string;
      method?: string;
      frequency?: number;
      status?: string;
    };
    MonitorInfoOut: {
      monitor?: components["schemas"]["Monitor"];
      message?: string;
    };
    MonitorItem: {
      id?: string;
      name?: string;
      url?: string;
      frequency?: number;
      status?: string;
      heartbeat?: {
        id?: number;
        monitor_id?: number;
        /** Format: date-time */
        timestamp?: string;
        status_code?: string;
        status?: string;
        latency?: number;
        message?: string;
      }[];
    };
    MonitorSummary: {
      averageLatency?: number;
      dayUptime?: number;
      monthUptime?: number;
    };
    MonitorSummaryOut: {
      summary?: components["schemas"]["MonitorSummary"];
      message?: string;
    };
    MonitorsListOut: {
      message?: string;
      monitors?: {
        id?: string;
        name?: string;
        url?: string;
        frequency?: number;
        status?: string;
        heartbeat?: {
          id?: number;
          monitor_id?: number;
          /** Format: date-time */
          timestamp?: string;
          status_code?: string;
          status?: string;
          latency?: number;
          message?: string;
        }[];
      }[];
    };
    NeedSetup: {
      needSetup?: boolean;
    };
    Notification: {
      id?: string;
      name?: string;
      provider?: string;
      data?: components["schemas"]["NotificationData"];
    };
    NotificationChannelInfo: {
      notification?: components["schemas"]["Notification"];
      message?: string;
    };
    NotificationCreateIn: {
      name?: string;
      provider?: string;
      data?: components["schemas"]["NotificationData"];
    };
    NotificationData: {
      webhookUrl?: string;
    };
    NotificationItem: {
      id?: string;
      name?: string;
      provider?: string;
    };
    NotificationListOut: {
      notifications?: {
        id?: string;
        name?: string;
        provider?: string;
      }[];
      message?: string;
    };
    StatusPage: {
      id?: number;
      name?: string;
      slug?: string;
    };
    StatusPageInfo: {
      statusPage?: components["schemas"]["StatusPage"];
      message?: string;
    };
    SuccessResponse: {
      message?: string;
    };
    UpdateAccountIn: {
      firstname?: string;
      lastname?: string;
    };
    UpdatePasswordIn: {
      currentPassword?: string;
      newPassword?: string;
    };
    User: {
      username?: string;
      email?: string;
      firstname?: string;
      lastname?: string;
    };
    UserSignIn: {
      username?: string;
      password?: string;
    };
    UserSignInOut: {
      user?: components["schemas"]["User"];
      message?: string;
    };
    UserSignUp: {
      username?: string;
      email?: string;
      password?: string;
    };
    "models.StatusPage": {
      id?: number;
      name?: string;
      slug?: string;
    };
    "serializers.AddMonitorIn": {
      name?: string;
      url?: string;
      type?: string;
      frequency?: number;
      method?: string;
      notificationChannels?: string[];
      statusPages?: string[];
    };
    "serializers.CreateStatusPageIn": {
      name?: string;
      slug?: string;
    };
    "serializers.ErrorResponse": {
      message?: string;
    };
    "serializers.ListStatusPagesOut": {
      statusPages?: {
        id?: number;
        name?: string;
        slug?: string;
      }[];
      message?: string;
    };
    "serializers.NotificationCreateIn": {
      name?: string;
      provider?: string;
      data?: components["schemas"]["NotificationData"];
    };
    "serializers.NotificationListOut": {
      notifications?: {
        id?: string;
        name?: string;
        provider?: string;
      }[];
      message?: string;
    };
    "serializers.StatusPageInfo": {
      statusPage?: components["schemas"]["StatusPage"];
      message?: string;
    };
    "serializers.SuccessResponse": {
      message?: string;
    };
    "serializers.UserSignInOut": {
      user?: components["schemas"]["User"];
      message?: string;
    };
  };
}

export interface operations {}

export interface external {}
